=========================
GroupServer Notifications
=========================

:Authors: Alice Murphy; Michael JasonSmith
:Contact: Michael JasonSmith <mpj17@onlinegroups.net>
:Organization: `GroupServer.org`_
:Date: 2014-02-26
:Copyright: This document is licensed under a
  `Creative Commons Attribution-Share Alike 3.0 New Zealand License`_
  by `OnlineGroups.Net`_.

.. contents:: `Table of contents`
   :depth: 2

Notifications are small messages that are sent to the user outside the
group-email context. They include messages such as the `invitation`_ to
join a group, and the `group welcome`_ email. In this document we describe
the various notifications sent by GroupServer. We summarise who they are
sent to, and the code-path that is followed to send the notification.

Currently the notifications are being transitioned to their third
version. These `file-system-side notifications`_ are are more flexible than
the old `notification templates`_. The notifications in different
sub-systems will be converted to file-system side notifications when each
module is reviewed in the normal process of software maintenance and
refactoring.

Finally, we end with a review of the ListManager_ that sends email
messages, and as responses to commands that are sent by email.

File-System-Side Notifications
==============================

As we rebuild each subsystem, we move its notifications to the file system,
from the ZMI. The file-system-side notifications work like Web pages. The
notification system renders two pages — an HTML page and a plain-text
version of the same message — and places them in an email message. All of
the new fine-system-side notifications use
``gs.profile.notify.sender.MessageSender`` to send the message.

Cannot Post
-----------

Sent to a person with a profile when they attempt to post to a group, 
but disallowed. The content of the message comes from the viewlets that
make up the ``gs.group.type.*`` eggs. For people people without a 
profile see `unknown email address`_.

:Sent to: The a person with a profile that cannot post to the group.
:URL: *Group Page* ``/cannot-post.html``
:via:
  | ``Products.XWFMailingListManager.XWFMailingList.checkMail``
  | ``gs.group.member.canpost.notifier.Notifier``
  | ``gs.group.member.canpost.notifier.CannotPostMessageSender``
  | ``gs.profile.notify.notifyuser.NotifyUser``

Invitation
----------

An invitation is a message from an administrator asking someone to
join the group. It is also used to present the administrator with a
*preview* of the invitation.

:Sent to: Someone who has been invited to join a group by the administrator.
:URL: *Group page* ``/invitationmessage.html``
:via: Clicking *Invite*

  | ``gs.group.member.invite.base.invite.InviteEditProfileForm``
  | ``gs.group.member.invite.base.processor.InviteProcessor``
  | ``gs.group.member.invite.base.inviter.Inviter``
  | ``gs.group.member.invite.base.notify.InvitationNotifier``
  | ``gs.profile.notify.sender.MessageSender``
  |
  | Invite site member: ``gs.group.member.invite.invitesitemembers.GSInviteSiteMembersForm``
  | ``gs.group.member.invite.json.api.InviteUserAPI``
  | ``gs.group.member.invite.base.processor.InviteProcessor``
  | ...
  |
  | Invite in bulk: ``gs.group.member.invite.csv.ui.CSVUploadUI``
  | ``gs.group.member.invite.json.api.InviteUserAPI``
  | ``gs.group.member.invite.base.processor.InviteProcessor``
  | ...
  |
  | Resend: ``gs.group.member.invite.resend.reinvite.ResendInvitationForm``
  | ``gs.group.member.invite.base.processor.InviteProcessor``
  | ...

Group Welcome
-------------

The *Group Welcome* notification is sent to a new member when he or she
joins a group. However, there are many ways of becoming a member, and some
still use the old code, rather than this shiny method.

Site administrators receive the `New Member`_ notification.

:Sent to: A new member of a group.
:URL: *Group page* ``/new-member-msg.html``
:via: A *logged in member* clicks ``Join`` in a Public group.

  | ``gs.group.join.join.JoinForm``
  | ``gs.group.join.notify.NotifyNewMember``
  | ``gs.profile.notify.sender.MessageSender``
  |
  | A new **invited** member accepts an invitation to join a group
  | ``gs.profile.invite.initalresponse``
  |
  | An existing **invited** member accepts an invitation to join a group.
  | ``gs.profile.invite.invitationsrespond``
  |
  | A new member joins a group during **registration** 
  | ``gs.profile.signup.base.changeprofile.ChangeProfileForm``  
  | *or* ``gs.profile.signup.base.verifywait.VerifyWaitForm``

Group Started
-------------

Information about the group that has just been started

:Sent to: Every site administrator.
:URL: *Group page* ``/gs-group-start.html``
:via: A *site administrator* clicks ``Start``

  | ``gs.group.start.startgroup.StartGroupForm``
  | ``gs.group.start.notify.StartNotifier``
  | ``gs.profile.notify.sender.MessageSender``

New Member
----------

Sent to the group administrators when a new member joins the group. It
is the flip-side of the `group welcome`_ notification.

:Sent to: The group administrators, or the site administrators if there are
          no group administrators.
:URL: *Group page* ``/new-member-admin-msg.html``
:via: A *logged in member* clicks ``Join`` in a Public group.

  | ``gs.group.join.join.JoinForm``
  | ``gs.group.join.notify.NotifyAdmin``
  | ``gs.profile.notify.sender.MessageSender``
  |
  | A new **invited** member accepts an invitation to join a group
  | ``gs.profile.invite.initalresponse``
  |
  | An existing **invited** member accepts an invitation to join a 
    group
  | ``gs.profile.invite.invitationsrespond``
  |
  | An administrator accepts the *request* to join the group. #3469
  | ``gs.group.member.request.request.respond.Respond``
  |
  | A new member joins a group during **registration**
  | ``gs.profile.signup.base.changeprofile.ChangeProfileForm`` 
  | *or* ``gs.profile.signup.base.verifywait.VerifyWaitForm``

Request Membership
------------------

This message is sent when someone requests to become a member of a
Private group. It is the opposite of a `invitation`_. It should not
be confused with `request_contact`_.

:Sent to: The administrator of the group.
:URL: *Group page* ``/request_message.html``
:via: The request membership form
  | ``gs.group.member.request.request.Request Form``
  | ``gs.profile.notify.sender.MessageSender``
  
Reset password
--------------

A link to reset a password, sent to an email address that is submitted
via the *Reset Password* page, when the email address is recognised
as belonging to a user.

:Sent to: The person that requested the password reset.
:URL: ``gs-profile-password-reset-message.html`` in the context of a user.
:via:
   | ``gs,profile.password.request.RequestPasswordResetForm``
   | ``gs,profile.password.notifier.ResetNotifier``
   | ``gs.profile.notify.sender.MessageSender``

Topic Digest
------------

The topic digest contains a summary of the topics that were discussed
recently in the group. A "cron-job" is used to regularly send out
the digests.

The topic digest is the oldest file-system-side notifications. It
was partly an experiment in how to create such a system. As
such, it requires a rewrite to bring it into line with the other
file-system-side notifications, which use the ``MessageSender`` class.

:Sent to: All group members who have elected to receive posts in digest form.
:URL: *Group Page* ``/digest.txt``    
:via:
  | ``gs.group.messages.senddigest.script.main``
  | ``gs.group.messages.senddigest.script.send_digest``
  | ``gs.group.messages.topicsdigest.sendDigest.SendAllDigests``
  | ...
  |   ``gs.group.messages.topicsdigest.notifiermessages.WeeklyMessage``
  |   ``gs.group.messages.topicsdigest.notifiermessages.DailyMessage``

Unknown Email Address
---------------------

A post is received by the mailing list from an unregistered email
address. It is the equivalent of the `cannot post`_ notification for
anonymous people.

:Sent to: The unrecognised email address, which sent the original message.
:URL: *Group Page* ``/unknown-email.html``
:via:
  | ``Products.XWFMailingListManager.XWFMailingList.processMail``
  | ``Products.XWFMailingListManager.XWFMailingList.mail_reply``
  | ``gs.group.member.canpost.unknownemail.Notifier``
  |
  | ``Products.XWFMailingListManager.XWFMailingList.requestMail``
  | ``Products.XWFMailingListManager.XWFMailingList.mail_reply``
  | ``gs.group.member.canpost.unknownemail.Notifier``
  | 
  | ``Products.XWFMailingListManager.XWFMailingList.processModeration``
  | ``Products.XWFMailingListManager.XWFMailingList.mail_reply``
  | ``gs.group.member.canpost.unknownemail.Notifier``

Verify Email Address
--------------------

Email addresses must be verified. The verification message is sent from
everywhere that email addresses can be added. It turns out that there are
*many* places that an email address can be added. The method
``gs.profile.email.verify.emailverificationuser.EmailVerificationUser.send_verification``
sends the verification message for all higher-level code.

:Sent to: The person who has the new address.
:URL: *Profile page* ``/verification-mesg.html``
:via: Anywhere that lets the user add an email address

  | Registering as a new user (or requesting membership as a new user)
  | ``gs.profile.signup.base.request_registration.RequestRegistrationForm``
  | ``gs.profile.email.verify.emailverificationuser.EmailVerificationUser``
  | ``gs.profile.email.verify.notify.Notifier``
  | ``gs.profile.notify.sender.MessageSender``
  |
  | Adding a new email address, or sending another verification message
    during registration
  | ``gs.profile.signup.base.verifywait.VerifyWaitForm``
  |
  | Adding a new email address
  | ``gs.profile.email.settings.settings.ChangeEmailSettingsForm``

Bounce
------

When GroupServer gets an XVERP return it logs a bounce. If the
group member has another email address then the user is told of
the bounce on the extra address.

:Sent to: The person who has the bouncing address
:URL: *Group page* ``/gs-group-member-bounce-bouncing.html``
:via: The *Handle bounce* page

  | ``gs.group.member.bounce.handlebounce.HandleBounce``
  | ``gs.group.member.bounce.notifier.UserBounceNotifier``
  | ``gs.profile.notify.sender.MessageSender``

Disabled (user)
---------------

When an address continually bounces then the address is
disabled. The user is told of this if he or she has an extra
address.

:Sent to: The person who has the bouncing address
:URL: *Group page* ``/gs-group-member-bounce-disabled.html``
:via: The *Handle bounce* page

  | ``gs.group.member.bounce.handlebounce.HandleBounce``
  | ``gs.group.member.bounce.notifier.UserDisabledNotifier``
  | ``gs.profile.notify.sender.MessageSender``

Disabled (administrator)
------------------------

The administrator is told when a member has his or her email
address disabled because of bouncing.

:Sent to: The administrators of the group that sent the post that
          bounced back.
:URL: *Group page* ``/gs-group-member-bounce-disabled-admin.html``
:via: The *Handle bounce* page

  | ``gs.group.member.bounce.handlebounce.HandleBounce``
  | ``gs.group.member.bounce.notifier.AdminDisabledNotifier``
  | ``gs.profile.notify.sender.MessageSender``

Notification Templates
======================

These are the old notifications. They are DTML templates: this is the
folder in which ``Products.CustomUserFolder.Customuser.send_notification``
looks to find the notifications passed to it by ID.

``del_group``
-------------

Sent to a member when they leave a group.

:Sent to: The former member of the group, that has just left.

:via:
  | A logged in member clicks ``Leave`` on the groups page or a group 
    homepage.
  | ``Products.GroupServer.Scripts.set.subscribe_group``
  | ``Products.CustomUserFolder.CustomUser.del_groupWithNotification``
  | ``Products.CustomUserFolder.CustomUser.send_notification``
  |
  | An administrator removes a member from the group.
  | ``...``
  |  (The Manage Members page is currently undergoing changes. This information 
  |   will be added once the new page is deployed.)

:See also: `Feature 4062`_

.. _Feature 4062: https://redmine.iopen.net/issues/4062

``leave_group_admin``
---------------------

Notify the administrators and the participation coach that a member has 
left the group.

:Sent to: The participation coach.

:via:
  | A logged in **member** clicks ``Leave`` on the groups index page or 
    the group homepage.
  | ``Products.GroupServer.Scripts.set.subscribe_group``
  | ``Products.CustomUserFolder.CustomUser.add_groupWithNotification``
  | ``Products.CustomUserFolder.CustomUser.send_notification``
  |
  | **An administrator** who is not the participation coach removes a
    member from the group.
  | ``...``
  | (The Manage Members page is currently undergoing changes. This information 
  |  will be added once the new page is deployed.)
  | ``Products.CustomUserFolder.CustomUser.add_groupWithNotification``
  | ``Products.CustomUserFolder.CustomUser.send_notification``

:See also: `Feature 4063`_

.. _Feature 4063: https://redmine.iopen.net/issues/4063

``request_contact``
-------------------

A user requests contact with another.

:Sent to: The member that is being petitioned for contact.

:via:
  | ``Products.GSProfile.request_contact.GSRequestContact.request_contact``
  | ``Products.CustomUserFolder.CustomUser.send_notification``

:See also: `Feature 3409`_

.. _Feature 3409: https://redmine.iopen.net/issues/3409

Moderation
----------

Moderation is a world unto its own, and is badly need of a rewrite
[#Moderation]_.

``mail_moderated_user``
~~~~~~~~~~~~~~~~~~~~~~~

A message to the group is received from a moderated member.

**Sent to**
  | The moderated member.

**via**
  | ``Products.XWFMailingListManager.XWFMailingList.processMail``
  | ``Products.XWFMailingListManager.XWFMailingList.processModeration``
  | ``Products.CustomUserFolder.CustomUser.send_notification``


``mail_moderator``
~~~~~~~~~~~~~~~~~~

A message to the group is received from a moderated member.

**Sent to**
  | The moderators.

**via**
  | ``Products.XWFMailingListManager.XWFMailingList.processMail``
  | ``Products.XWFMailingListManager.XWFMailingList.processModeration``
  | ``Products.CustomUserFolder.CustomUser.send_notification``

   
``ListManager``
===============

These notifications live in the ``ListManager`` instance within a
GroupServer instance.  Some of them are sent via python scripts
which also live in the ``ListManager``.  As the ``ListManager``
is an instance of the ``XWFMailingListManager`` class, we
distinguish the path to these scripts and notifications from
attributes of the class by using the name ``ListManager`` instead
of ``Products.XWFMailingListManager``, and using forward-slashes
(``/``)instead of attribute notation (``.``).

Much of these templates will be removed once we rebuild email
processing [#RebuildEmail]_.

``email_subscribe_key``
-----------------------

A subscribe command is received by the group mailing list.

**Sent to**
  ``The email address from which the command originated``

**via**
  | ``Products.XWFMailingListManager.XWFMailingList.requestMail``
  | ``Products.XWFMailingListManager.XWFMailingList.mail_subscribe_key``


``email_event_102``
-------------------

A group member sends an email that breaches the message size limit to the group.

**Sent to**
  ``The email address from which the message originated``

**via**
  | ``Products.XWFMailingListManager.XWFMailingList.mail_event_default``
  | ``ListManager/xwf_email_event``

``email_digest_off``
--------------------

A "digest off" command is received by the group mailing list from an email
address belonging to a group member.

**Sent to**
  ``The email address from which the command originated``

**via**
  | ``Products.XWFMailingListManager.XWFMailingList.requestMail``
  | ``Products.XWFMailingListManager.XWFMailingList.digest_off``
  | ``Products.XWFMailingListManager.XWFMailingList.mail_digest_off``
  | ``ListManager/xwf_email_digest_off``


``email_digest_on``
-------------------

A "digest on" command is received by the group mailing list from an email
address belonging to a group member.

**Sent to**
  ``The email address from which the command originated``

**via**
  | ``Products.XWFMailingListManager.XWFMailingList.requestMail``
  | ``Products.XWFMailingListManager.XWFMailingList.digest_on``
  | ``Products.XWFMailingListManager.XWFMailingList.mail_digest_on``
  | ``ListManager/xwf_email_digest_on``


``email_footer``
----------------

A post is sent out via email.

**Sent to**
  ``All group members who have their email delivery settings set to receive one`` 
  ``post at a time``

**via**
  | ``Products.XWFMailingListManager.XWFMailingList.manage_listboxer``
  | ``Products.XWFMailingListManager.XWFMailingList.listMail``
  |   ``Products.XWFMailingListManager.XWFMailingList.mail_footer``
  |   ``ListManager/xwf_email_footer``
  | ``Products.XWFMailingListManager.XWFMailingList.sendMail``
    

``email_header``
----------------

A post is sent out via email.

**Sent to**
  ``All group members who have their email delivery settings set to receive one``
  ``post at a time``

**via**
  | ``Products.XWFMailingListManager.XWFMailingList.manage_listboxer``
  | ``Products.XWFMailingListManager.XWFMailingList.listMail``
  |   ``Products.XWFMailingListManager.XWFMailingList.mail_header``
  |   ``ListManager/xwf_email_header``
  | ``Products.XWFMailingListManager.XWFMailingList.sendMail``

..  [#RebuildEmail] *Ticket 387: Rebuild Email Processing* is an 
    important ticket, that summarises the necessary changes for
    email processing <https://projects.iopen.net/groupserver/ticket/387>

..  [#Moderation] *Ticket 249: Rebuild Moderation* summarises the
    problems with moderation, and how to fix it
    <https://projects.iopen.net/groupserver/ticket/249>
  
..  _GroupServer.Org: http://groupserver.org/
..  _OnlineGroups.Net: http://onlinegroups.net/
..  _Creative Commons Attribution-Share Alike 3.0 New Zealand License:
    http://creativecommons.org/licenses/by-sa/3.0/nz/
